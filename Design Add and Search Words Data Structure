class TriNode{
    public:
        char data;
        TriNode* children[26];
        bool isTerminal;
        TriNode(char ch){
            data=ch;
            for(int i=0;i<26;i++){
                children[i]=NULL;
            }
            isTerminal=false;
        }
};
class WordDictionary {
public:
    TriNode* root;
    WordDictionary() {
        root=new TriNode('\0');
    }
    
    void addWordUtil(TriNode* root,string word){
        if(word.size()==0){
            root->isTerminal=true;
            return;
        }

        int index=word[0]-'a';
        TriNode* child;
        if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            child=new TriNode(word[0]);
            root->children[index]=child;
        }
        addWordUtil(child,word.substr(1));
    }
    void addWord(string word) {
        addWordUtil(root,word);
    }
    
    bool searchUtil(TriNode* root,string word){
        if(word.size()==0){
            return root->isTerminal;
        }

        int index=word[0]-'a';
        TriNode* child;
        bool ans=false;
        if( word[0] =='.'){
            bool flag=true;
           for(int i=0;i<26;i++){
               if(root->children[i]!=NULL){
                   flag=false;
                   child=root->children[i];
                   ans=(ans || searchUtil(child,word.substr(1)));
               }
           }
            if(flag){
                return false;
            }
        }
        else if(root->children[index]!=NULL){
            child=root->children[index];
        }
        else{
            return false;
        }
        return (ans || searchUtil(child,word.substr(1)));
    }

    bool search(string word) {
        return searchUtil(root,word);
    }
};
