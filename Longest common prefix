class TriNode{
    public:
        char data;
        TriNode* children[26];
        int childrenCnt;
        bool isTerminal;
        TriNode(char ch){
            data=ch;
            for(int i=0;i<26;i++){
                children[i]=NULL;
            }
            childrenCnt=0;
            isTerminal=false;
        }
};
class Tri{
    public:
        TriNode* root;
        Tri(){
            root=new TriNode('\0');
        }
        void insertUtil(TriNode* root,string word){
            if(word.size()==0){
                root->isTerminal=true;
                return;
            }

            int index=word[0]-'a';
            TriNode* child;
            if(root->children[index]!=NULL){
                child=root->children[index];
            }
            else{
                child=new TriNode(word[0]);
                root->childrenCnt++;
                root->children[index]=child;
            }
            insertUtil(child,word.substr(1));
        }
        void insert(string word){
            insertUtil(root,word);
        }

        void search(string str,string &ans){

            for(int i=0;i<str.size();i++){
                char ch=str[i];
                // cout<<root->childrenCnt;
                if(root->childrenCnt==1){
                    ans.push_back(ch);
                    int index=ch-'a';
                    root=root->children[index];
                }
                else{
                    break;
                }
                if(root->isTerminal){
                    break;
                }
            }
        }
};

string longestCommonPrefix(vector<string> &arr, int n)
{
    Tri* t=new Tri();
    for(int i=0;i<n;i++){
        t->insert(arr[i]);
    }

    string ans="";
    t->search(arr[0],ans);
    return ans;
}


