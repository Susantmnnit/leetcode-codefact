class TriNode{
    public:
        char data;
        TriNode* children[26];
        int childrenCnt;
        bool isTerminal;
        TriNode(char ch){
            data=ch;
            for(int i=0;i<26;i++){
                children[i]=NULL;
            }
            childrenCnt=0;
            isTerminal=false;
        }
};
class Tri{
    public:
        TriNode* root;
        Tri(){
            root=new TriNode('\0');
        }
        void insertUtil(TriNode* root,string word){
            if(word.size()==0){
                root->isTerminal=true;
                return;
            }

            int index=word[0]-'a';
            TriNode* child;
            if(root->children[index]!=NULL){
                child=root->children[index];
            }
            else{
                child=new TriNode(word[0]);
                root->childrenCnt++;
                root->children[index]=child;
            }
            insertUtil(child,word.substr(1));
        }
        void insert(string word) { 
            insertUtil(root, word); 
        }

        void printSuggestion(TriNode* root,vector<string>&temp,string &prefix){
            if(root->isTerminal){
                temp.push_back(prefix);
            }

            for(char ch='a';ch<='z';ch++){
                TriNode* child=root->children[ch-'a'];
                if(child!=NULL){
                    prefix.push_back(ch);
                    printSuggestion(child,temp,prefix);
                    prefix.pop_back();
                }
            }
        }
        vector<vector<string>> getSuggestion(string str){
            vector<vector<string>>ans;
            TriNode* prev=root;
            string prefix="";
            
            for(int i=0;i<str.size();i++){
                char lastch=str[i];
                prefix.push_back(lastch);

                TriNode* curr=prev->children[lastch-'a'];
                if(curr==NULL){
                    break;
                }

                vector<string>temp;
                printSuggestion(curr,temp,prefix);
                ans.push_back(temp);
                temp.clear();
                prev=curr;
            }
            return ans;
        }
};

vector<vector<string>>phoneDirectory(vector<string> &contactList, string &queryStr) {
    Tri* t=new Tri();
    for(int i=0;i<contactList.size();i++){
        t->insert(contactList[i]);
    }

    return t->getSuggestion(queryStr);
}
