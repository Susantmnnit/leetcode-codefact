//{ Driver Code Starts
#include<bits/stdc++.h>
const int mod=1e9+7;
using namespace std;

// } Driver Code Ends
// function to find longest common subsequence

class Solution
{
    public:
    //Function to find the length of longest common subsequence in two strings.
    // int solve(string str1,string str2,int i,int j,vector<vector<int>>&dp){
    //     if(i>=str1.size()||j>=str2.size()){
    //         return 0;
    //     }
        
    //     if(dp[i][j]!=-1){
    //         return dp[i][j];
    //     }
    //     // int ans=0;
    //     if(str1[i]==str2[j]){
    //         return dp[i][j]=1+solve(str1,str2,i+1,j+1,dp);
    //     }
    //     else{
    //         int x1=solve(str1,str2,i,j+1,dp);
    //         int x2=solve(str1,str2,i+1,j,dp);
    //         return dp[i][j]=max(x1,x2);
    //     }
    // }
    int solve(string str1,string str2){
        vector<vector<int>>dp(str1.size()+1,vector<int>(str2.size()+1,0));
        
        for(int i=str1.size()-1;i>=0;i--){
            for(int j=str2.size()-1;j>=0;j--){
                if(str1[i]==str2[j]){
                    dp[i][j]=1+dp[i+1][j+1];
                }
                else{
                    dp[i][j]=max(dp[i][j+1],dp[i+1][j]);
                }
            }
        }
        return dp[0][0];
    }
    int lcs(int n, int m, string s1, string s2)
    {
        string str1="";
        string str2="";
        for(int i=0;i<s1.size();i++){
            if(s2.find(s1[i])!=string::npos){
                str1+=s1[i];
            }
        }
        for(int i=0;i<s2.size();i++){
            if(s1.find(s2[i])!=string::npos){
                str2+=s2[i];
            }
        }
        // cout<<str1<<" "<<str2<<endl;
        if(str1==str2) return str1.size();
        // vector<vector<int>>dp(str1.size(),vector<int>(str2.size(),-1));
        return solve(str1,str2);
    }
};


//{ Driver Code Starts.
int main()
{
    int t,n,m;
    cin>>t;
    while(t--)
    {
        cin>>n>>m;          // Take size of both the strings as input
        string s1,s2;
        cin>>s1>>s2;        // Take both the string as input
        Solution ob;
        cout << ob.lcs(n, m, s1, s2) << endl;
    }
    return 0;
}

// } Driver Code Ends
