class Solution {
public:
    struct cmp{
        bool operator()(const pair<int,int>&p1,const pair<int,int>&p2){
            if(p1.first!=p2.first){
                return p1.first>p2.first;
            }
            else{
                return p1.second>p2.second;
            }
        }
    };
    long long totalCost(vector<int>& costs, int k, int candidates) {
        long long cost=0;
        int n=costs.size();
        priority_queue<pair<int,int>,vector<pair<int,int>>,cmp>pq;
        int i=0,j=n-1;
        if(i==j)return costs[i];
        while(i<j && candidates>0){
            candidates--;
            pq.push({costs[i],i});
            pq.push({costs[j],j});
            i++;
            j--;
        }
        while(k>0 && i<=j){
            k--;
            pair<int,int>top=pq.top();
            cost+=top.first;
            pq.pop();
            if(i>top.second){
                pq.push({costs[i],i});
                i++;
            }
            else{
                pq.push({costs[j],j});
                j--;
            }
        }
        while(k>0 && !pq.empty()){
            pair<int,int>top=pq.top();
            cost+=top.first;
            pq.pop();
            k--;
        }
        return cost;
    }
};
